import tkinter as tk
from tkinter import messagebox
from tkinter.scrolledtext import ScrolledText
import hashlib
import itertools
import time

def validate_hash(hash_value, hash_type):
    if hash_type == "MD5":
        return len(hash_value) == 32
    elif hash_type == "SHA1":
        return len(hash_value) == 40
    elif hash_type == "SHA256":
        return len(hash_value) == 64
    elif hash_type == "SHA3":
        return len(hash_value) == 64 
    else:
        return False

def calculate_hash(message, hash_type):
    if hash_type == "MD5":
        hasher = hashlib.md5()
    elif hash_type == "SHA1":
        hasher = hashlib.sha1()
    elif hash_type == "SHA256":
        hasher = hashlib.sha256()
    elif hash_type == "SHA3":
        hasher = hashlib.sha3_256()  
    else:
        return None

    hasher.update(message.encode('utf-8'))
    return hasher.hexdigest()

def generate_combinations(characters, length):
    for combination in itertools.product(characters, repeat=length):
        yield ''.join(combination)

def crack_password():
    start_time = time.time()
    hash_value = hash_entry.get()
    hash_type = hash_choice.get()

    if not validate_hash(hash_value, hash_type):
        messagebox.showerror("Error", f"Invalid {hash_type} hash.")
        return

    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!"#$%&*<=>?@'

    result_text.delete(1.0, tk.END)
    test_text.delete(1.0, tk.END)  

    for length in range(6, 13):  # Password length from 6 to 12
        for combination in generate_combinations(characters, length):
            calculated_hash = calculate_hash(combination, hash_type)
            test_text.insert(tk.END, f"Testing combination: {combination}, Hash: {calculated_hash}\n")
            test_text.update()  
            if calculated_hash == hash_value:
                result_text.insert(tk.END, f"Password found: {combination}\n")
                result_text.tag_configure("found", foreground="green")
                result_text.tag_add("found", "1.0", "end")
                return
            test_text.delete(1.0, tk.END)  

    elapsed_time = time.time() - start_time
    result_text.insert(tk.END, f"Password found: {combination}\nSearch time: {elapsed_time:.4f} seconds")
    result_text.tag_configure("not_found", foreground="red")
    result_text.tag_add("not_found", "1.0", "end")


root = tk.Tk()
root.title("Password Cracker")

window_width = 800
window_height = 600
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x = (screen_width - window_width) // 2
y = (screen_height - window_height) // 2

root.geometry(f"{window_width}x{window_height}+{x}+{y}")

hash_label = tk.Label(root, text="Hash:")
hash_label.pack()

hash_choice = tk.StringVar()
hash_choice.set("MD5")  
hash_md5_radio = tk.Radiobutton(root, text="MD5", variable=hash_choice, value="MD5")
hash_md5_radio.pack()
hash_sha1_radio = tk.Radiobutton(root, text="SHA1", variable=hash_choice, value="SHA1")
hash_sha1_radio.pack()
hash_sha256_radio = tk.Radiobutton(root, text="SHA256", variable=hash_choice, value="SHA256")
hash_sha256_radio.pack()
hash_sha3_radio = tk.Radiobutton(root, text="SHA3", variable=hash_choice, value="SHA3")
hash_sha3_radio.pack()

hash_entry_label = tk.Label(root, text="Hash Value:")
hash_entry_label.pack()
hash_entry = tk.Entry(root, width=50)
hash_entry.pack()

crack_button = tk.Button(root, text="Crack", command=crack_password, width=20)
crack_button.pack()

result_text = ScrolledText(root, width=70, height=10)
result_text.pack()

test_text = ScrolledText(root, width=70, height=10)
test_text.pack()

root.mainloop()
